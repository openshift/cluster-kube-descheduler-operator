// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1 "github.com/openshift/cluster-kube-descheduler-operator/pkg/apis/descheduler/v1"
	deschedulerv1 "github.com/openshift/cluster-kube-descheduler-operator/pkg/generated/applyconfiguration/descheduler/v1"
	internal "github.com/openshift/cluster-kube-descheduler-operator/pkg/generated/applyconfiguration/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	testing "k8s.io/client-go/testing"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=operator.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("EvictionLimits"):
		return &deschedulerv1.EvictionLimitsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeDescheduler"):
		return &deschedulerv1.KubeDeschedulerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeDeschedulerSpec"):
		return &deschedulerv1.KubeDeschedulerSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("KubeDeschedulerStatus"):
		return &deschedulerv1.KubeDeschedulerStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Namespaces"):
		return &deschedulerv1.NamespacesApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ProfileCustomizations"):
		return &deschedulerv1.ProfileCustomizationsApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) *testing.TypeConverter {
	return &testing.TypeConverter{Scheme: scheme, TypeResolver: internal.Parser()}
}
